{
  "name": "Combined Pipeline",
  "nodes": [
    {
      "parameters": {
        "content": "## Combined Inbound/Outbound Pipeline\n\n**Purpose**: Unified pipeline handling both inbound and outbound leads with shared enrichment, scoring, and routing logic\n\n**Architecture**:\n1. Single entry point (webhook/trigger)\n2. Lead type detection (inbound vs outbound)\n3. Route to appropriate subflow logic\n4. Shared services: Enrichment, Scoring, Dedupe, HubSpot sync\n5. Centralized data repository (Google Sheets)\n6. Unified monitoring and reporting\n\n**Benefits**:\n- Single source of truth for all leads\n- Consistent data quality\n- No duplicate processing\n- Holistic lead scoring\n- Unified reporting dashboard",
        "height": 440,
        "width": 460
      },
      "id": "sticky_combined_overview",
      "name": "Combined Pipeline Overview",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        240,
        240
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "unified-lead-intake",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook_unified",
      "name": "Unified Lead Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        760,
        380
      ],
      "webhookId": "unified-lead-intake",
      "notes": "Single webhook endpoint for all lead sources - inbound forms, API submissions, integrations"
    },
    {
      "parameters": {
        "content": "## Unified Entry Point\n\nAccepts leads from:\n- **Inbound**: Website forms, landing pages, chatbots, webinars\n- **Outbound**: Manual list uploads, automated scraping, partner integrations\n- **API**: Direct submissions from other tools\n\n**Detection fields**:\n- `source`: 'inbound' | 'outbound' | 'api'\n- `origin`: Header or URL parameter\n- `list_id`: Present for outbound batches\n- `form_id`: Present for inbound submissions",
        "height": 300,
        "width": 340
      },
      "id": "sticky_unified_entry",
      "name": "Entry Point Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        720,
        600
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { \"success\": true, \"message\": \"Lead received\", \"lead_id\": $json.email || $json.contact_email, \"type\": $json.detected_type } }}"
      },
      "id": "webhook_response_combined",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        960,
        380
      ]
    },
    {
      "parameters": {
        "jsCode": "// Lead Type Detection - Determine if inbound or outbound\nconst lead = $input.first().json;\n\nlet leadType = 'unknown';\nlet source = lead.source || '';\n\n// Detection logic\nif (lead.list_id || lead.campaign_id || source === 'outbound') {\n  leadType = 'outbound';\n} else if (lead.form_id || lead.page_url || source === 'inbound' || source.includes('website') || source.includes('landing')) {\n  leadType = 'inbound';\n} else if (lead.origin && lead.origin.includes('outbound')) {\n  leadType = 'outbound';\n} else if (lead.origin && lead.origin.includes('inbound')) {\n  leadType = 'inbound';\n} else {\n  // Default: check if enriched contact data present (outbound) or minimal form data (inbound)\n  leadType = lead.company_domain ? 'outbound' : 'inbound';\n}\n\nreturn {\n  ...lead,\n  detected_type: leadType,\n  detection_timestamp: new Date().toISOString(),\n  // Normalize field names\n  email: lead.email || lead.contact_email,\n  name: lead.name || lead.contact_name,\n  company: lead.company || lead.company_name,\n  title: lead.job_title || lead.contact_title || lead.title\n};"
      },
      "id": "detect_lead_type",
      "name": "Detect Lead Type",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1160,
        380
      ]
    },
    {
      "parameters": {
        "content": "## Lead Type Detection\n\n**Detection Logic**:\n1. Check for `list_id` or `campaign_id` \u2192 Outbound\n2. Check for `form_id` or `page_url` \u2192 Inbound\n3. Check `source` field value\n4. Check `origin` header\n5. Check data completeness (enriched = outbound)\n\n**Field Normalization**:\nMaps various field names to canonical format:\n- email / contact_email \u2192 email\n- name / contact_name \u2192 name\n- job_title / contact_title / title \u2192 title\n- company / company_name \u2192 company",
        "height": 300,
        "width": 340
      },
      "id": "sticky_detection",
      "name": "Detection Logic Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1120,
        600
      ]
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "append",
        "sheetId": "={{CREDENTIAL_GOOGLE_SHEETS}}/All_Leads_Raw",
        "range": "A:N",
        "options": {}
      },
      "id": "sheets_all_leads_raw",
      "name": "Save to Unified Raw Leads",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 3,
      "position": [
        1360,
        380
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "{{CREDENTIAL_GOOGLE_SHEETS}}",
          "name": "Google Sheets API"
        }
      },
      "notes": "Central repository for ALL leads regardless of source"
    },
    {
      "parameters": {
        "content": "## Centralized Data Repository\n\n**Google Sheets Structure**:\n\n**All_Leads_Raw**: Every lead, no processing\n**Enriched_Leads**: After enrichment complete\n**MQL_Queue**: Qualified leads ready for sales\n**Outbound_Queue**: Outbound prospects in sequence\n**Nurture_Queue**: Low-score leads in drip\n**Canonical_Records**: Single deduplicated record per contact\n\n**Benefits**:\n- Audit trail\n- Easy analysis in Sheets/BI tools\n- Recovery if pipeline fails\n- Historical tracking",
        "height": 320,
        "width": 360
      },
      "id": "sticky_data_repo",
      "name": "Data Repository Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1320,
        620
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.detected_type }}",
              "value2": "inbound"
            }
          ]
        }
      },
      "id": "if_inbound",
      "name": "Is Inbound?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1560,
        380
      ]
    },
    {
      "parameters": {
        "url": "https://api.apify.com/v2/acts/{{CREDENTIAL_APIFY}}/runs",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "email",
              "value": "={{ $json.email }}"
            },
            {
              "name": "company",
              "value": "={{ $json.company }}"
            },
            {
              "name": "enrichment_type",
              "value": "inbound"
            }
          ]
        }
      },
      "id": "apify_shared_enrichment",
      "name": "Shared Enrichment Service",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        1760,
        280
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "{{CREDENTIAL_APIFY}}",
          "name": "Apify API"
        }
      },
      "notes": "Shared enrichment used by both inbound and outbound flows - Apify actor: UnifiedContactEnricher"
    },
    {
      "parameters": {
        "url": "https://api.apify.com/v2/acts/{{CREDENTIAL_APIFY}}/runs",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "company_domain",
              "value": "={{ $json.company_domain }}"
            },
            {
              "name": "target_title",
              "value": "={{ $json.title }}"
            },
            {
              "name": "enrichment_type",
              "value": "outbound"
            }
          ]
        }
      },
      "id": "apify_outbound_enrichment",
      "name": "Outbound Enrichment Service",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        1760,
        480
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "{{CREDENTIAL_APIFY}}",
          "name": "Apify API"
        }
      },
      "notes": "Outbound-specific enrichment with company scraping - Apify actor: TargetAccountEnricher"
    },
    {
      "parameters": {
        "content": "## Shared Enrichment Service\n\n**Universal Enrichment**:\n- Company data (size, industry, revenue)\n- Contact verification\n- LinkedIn profile\n- Phone number\n- Job level/seniority\n- Technology stack\n\n**Inbound-specific**:\n- Email validation priority\n- Behavioral data (page visits, downloads)\n\n**Outbound-specific**:\n- Company news scraping\n- Competitive intelligence\n- Contact discovery\n\n**Result**: Standardized enriched lead object",
        "height": 320,
        "width": 340
      },
      "id": "sticky_shared_enrichment",
      "name": "Shared Enrichment Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1720,
        680
      ]
    },
    {
      "parameters": {
        "url": "https://api.emailvalidator.com/validate",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "email",
              "value": "={{ $json.email }}"
            }
          ]
        }
      },
      "id": "validate_email_shared",
      "name": "Validate Email (Shared)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        1960,
        380
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "{{CREDENTIAL_EMAIL_VALIDATOR}}",
          "name": "Email Validator API"
        }
      }
    },
    {
      "parameters": {
        "url": "https://api.linkedinvalidator.com/check",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "linkedin_url",
              "value": "={{ $json.linkedin_url }}"
            }
          ]
        }
      },
      "id": "validate_linkedin_shared",
      "name": "Validate LinkedIn (Shared)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        2160,
        380
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "{{CREDENTIAL_LINKEDIN_VALIDATOR}}",
          "name": "LinkedIn Validator API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Centralized Lead Scoring Engine\n// Used by both inbound and outbound flows\nconst lead = $input.first().json;\n\nlet score = 0;\nconst scoreBreakdown = {};\n\n// 1. COMPANY FIT (0-30 points)\nconst sizeScores = {'1-10': 5, '11-50': 10, '51-200': 20, '201-1000': 25, '1001+': 20};\nconst companyScore = sizeScores[lead.company_size] || 0;\nscore += companyScore;\nscoreBreakdown.company_size = companyScore;\n\nconst targetIndustries = ['Software', 'Technology', 'SaaS', 'Finance', 'Healthcare', 'E-commerce'];\nconst industryScore = targetIndustries.includes(lead.company_industry) ? 15 : 0;\nscore += industryScore;\nscoreBreakdown.industry = industryScore;\n\n// 2. CONTACT QUALITY (0-30 points)\nconst levelScores = {'C-Level': 25, 'VP': 20, 'Director': 15, 'Manager': 10, 'IC': 5};\nconst levelScore = levelScores[lead.job_level] || 0;\nscore += levelScore;\nscoreBreakdown.job_level = levelScore;\n\nlet dataScore = 0;\nif (lead.email_valid) dataScore += 5;\nif (lead.linkedin_url && lead.linkedin_valid) dataScore += 5;\nif (lead.phone && lead.phone_valid) dataScore += 5;\nscore += dataScore;\nscoreBreakdown.data_quality = dataScore;\n\n// 3. INTENT & ENGAGEMENT (0-25 points)\nlet intentScore = 0;\nif (lead.detected_type === 'inbound') {\n  const highIntentSources = ['demo_request', 'pricing_page', 'contact_sales', 'free_trial'];\n  const mediumIntentSources = ['webinar', 'whitepaper', 'case_study'];\n  if (highIntentSources.includes(lead.source)) intentScore = 20;\n  else if (mediumIntentSources.includes(lead.source)) intentScore = 10;\n  else intentScore = 5;\n} else {\n  // Outbound: score based on research quality\n  if (lead.personalization_score > 60) intentScore = 15;\n  else if (lead.personalization_score > 30) intentScore = 10;\n  else intentScore = 5;\n}\nscore += intentScore;\nscoreBreakdown.intent = intentScore;\n\n// 4. TIMING & SIGNALS (0-15 points)\nlet timingScore = 0;\nif (lead.recent_news && lead.recent_news.includes('funding')) timingScore += 10;\nif (lead.tech_stack && lead.tech_stack.includes('competitor')) timingScore += 5;\nif (lead.hiring_growth === 'high') timingScore += 5;\nscore += Math.min(timingScore, 15);\nscoreBreakdown.timing = timingScore;\n\n// Determine tier\nlet tier = 'Low';\nlet is_mql = false;\nif (score >= 75) {\n  tier = 'Hot';\n  is_mql = true;\n} else if (score >= 55) {\n  tier = 'MQL';\n  is_mql = true;\n} else if (score >= 35) {\n  tier = 'Nurture';\n} else {\n  tier = 'Low';\n}\n\nreturn {\n  ...lead,\n  lead_score: score,\n  score_breakdown: scoreBreakdown,\n  lead_tier: tier,\n  is_mql: is_mql,\n  scored_at: new Date().toISOString(),\n  scoring_version: 'v2.0'\n};"
      },
      "id": "score_unified",
      "name": "Centralized Scoring Engine",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2360,
        380
      ]
    },
    {
      "parameters": {
        "content": "## Centralized Scoring Engine\n\n**Unified scoring model** for both inbound/outbound:\n\n**100-point scale**:\n1. **Company Fit** (30 pts)\n   - Size: 0-25\n   - Industry: 0-15\n\n2. **Contact Quality** (30 pts)\n   - Seniority: 0-25\n   - Data completeness: 0-15\n\n3. **Intent/Engagement** (25 pts)\n   - Inbound: Source quality\n   - Outbound: Personalization depth\n\n4. **Timing Signals** (15 pts)\n   - Funding, hiring, tech stack\n\n**Tiers**:\n- Hot: 75+ (immediate outreach)\n- MQL: 55-74 (qualified for sales)\n- Nurture: 35-54 (automated drip)\n- Low: <35 (long-term nurture)",
        "height": 400,
        "width": 380
      },
      "id": "sticky_scoring",
      "name": "Unified Scoring Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2320,
        700
      ]
    },
    {
      "parameters": {
        "jsCode": "// Canonical Record Matching & Deduplication\n// Ensures single record per unique person/company\nconst lead = $input.first().json;\n\n// Normalize data for matching\nconst normalizedEmail = (lead.email || '').toLowerCase().trim();\nconst normalizedPhone = (lead.phone || '').replace(/\\D/g, '');\nconst companyDomain = lead.company_domain || (lead.email ? lead.email.split('@')[1] : '');\n\n// Matching rules (in priority order)\nconst matchingRules = {\n  email: normalizedEmail,\n  phone: normalizedPhone,\n  company_domain: companyDomain,\n  linkedin_url: lead.linkedin_url\n};\n\n// In production, this would query HubSpot + Google Sheets\n// For now, simulate with flag\nconst isExisting = false; // Replace with actual lookup\n\nreturn {\n  ...lead,\n  normalized_email: normalizedEmail,\n  normalized_phone: normalizedPhone,\n  company_domain: companyDomain,\n  matching_rules: matchingRules,\n  is_duplicate: isExisting,\n  canonical_id: isExisting ? 'existing_id' : 'new_' + Date.now(),\n  dedupe_timestamp: new Date().toISOString()\n};"
      },
      "id": "canonicalize",
      "name": "Canonicalization & Dedupe Service",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2560,
        380
      ]
    },
    {
      "parameters": {
        "content": "## Canonicalization & Deduplication\n\n**Ensures single source of truth**:\n\n**Matching Logic** (checked in order):\n1. **Exact email match** \u2192 Same person\n2. **Normalized phone match** \u2192 Likely same\n3. **Company domain + name similarity** \u2192 Same company contact\n4. **LinkedIn URL** \u2192 Same person\n\n**Field Normalization**:\n- Email: lowercase, trim\n- Phone: remove all non-digits\n- Company domain: extract from email or URL\n- Name: title case, handle Jr/Sr\n\n**Merge Strategy**:\n- Keep most recent data\n- Preserve all source attributions\n- Increment interaction count\n- Update score if new data improves it\n\n**Prevents**:\n- Duplicate CRM records\n- Multiple outreach to same person\n- Conflicting data",
        "height": 400,
        "width": 380
      },
      "id": "sticky_canonicalization",
      "name": "Canonicalization Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2520,
        700
      ]
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "lookup",
        "sheetId": "={{CREDENTIAL_GOOGLE_SHEETS}}/Canonical_Records",
        "range": "A:Z",
        "lookupColumn": "email",
        "lookupValue": "={{ $json.normalized_email }}"
      },
      "id": "lookup_canonical",
      "name": "Lookup Canonical Record",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 3,
      "position": [
        2760,
        380
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "{{CREDENTIAL_GOOGLE_SHEETS}}",
          "name": "Google Sheets API"
        }
      },
      "notes": "Check centralized canonical records sheet for existing contact"
    },
    {
      "parameters": {
        "resource": "contact",
        "operation": "search",
        "email": "={{ $json.normalized_email }}",
        "additionalFields": {}
      },
      "id": "lookup_hubspot",
      "name": "Lookup in HubSpot",
      "type": "n8n-nodes-base.hubspot",
      "typeVersion": 1,
      "position": [
        2760,
        520
      ],
      "credentials": {
        "hubspotApi": {
          "id": "{{CREDENTIAL_HUBSPOT}}",
          "name": "HubSpot API"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.is_duplicate }}",
              "value2": false
            }
          ]
        }
      },
      "id": "if_new_record",
      "name": "Is New Record?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        2960,
        380
      ]
    },
    {
      "parameters": {
        "resource": "contact",
        "operation": "upsert",
        "email": "={{ $json.normalized_email }}",
        "additionalFields": {
          "firstname": "={{ $json.name.split(' ')[0] }}",
          "lastname": "={{ $json.name.split(' ').slice(1).join(' ') }}",
          "company": "={{ $json.company }}",
          "jobtitle": "={{ $json.title }}",
          "phone": "={{ $json.normalized_phone }}",
          "linkedin": "={{ $json.linkedin_url }}",
          "lead_score": "={{ $json.lead_score }}",
          "lead_tier": "={{ $json.lead_tier }}",
          "lead_source": "={{ $json.detected_type }}",
          "original_source": "={{ $json.source }}",
          "hs_lead_status": "={{ $json.is_mql ? 'MQL' : 'Nurture' }}"
        }
      },
      "id": "hubspot_upsert",
      "name": "Upsert to HubSpot",
      "type": "n8n-nodes-base.hubspot",
      "typeVersion": 1,
      "position": [
        3160,
        380
      ],
      "credentials": {
        "hubspotApi": {
          "id": "{{CREDENTIAL_HUBSPOT}}",
          "name": "HubSpot API"
        }
      },
      "notes": "Creates or updates contact in HubSpot with unified data model"
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "append",
        "sheetId": "={{CREDENTIAL_GOOGLE_SHEETS}}/Enriched_Leads",
        "range": "A:Z",
        "options": {}
      },
      "id": "sheets_enriched",
      "name": "Save to Enriched Leads Sheet",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 3,
      "position": [
        3360,
        380
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "{{CREDENTIAL_GOOGLE_SHEETS}}",
          "name": "Google Sheets API"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.is_mql }}",
              "value2": true
            }
          ]
        }
      },
      "id": "if_mql_combined",
      "name": "Is MQL?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        3560,
        380
      ]
    },
    {
      "parameters": {
        "url": "https://graph.microsoft.com/v1.0/teams/{{CREDENTIAL_TEAMS}}/channels/{{ $json.detected_type === 'inbound' ? 'inbound-mqls' : 'outbound-intent' }}/messages",
        "authentication": "genericCredentialType",
        "genericAuthType": "oAuth2Api",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "body",
              "value": "={{ {\n  \"body\": {\n    \"content\": ($json.detected_type === 'inbound' ? '\ud83d\udd25 Inbound MQL' : '\ud83c\udfaf Outbound MQL') + \": \" + $json.name + \" from \" + $json.company + \"\\n\\n\ud83d\udcca Score: \" + $json.lead_score + \" (\" + $json.lead_tier + \")\\n\ud83d\udce7 \" + $json.normalized_email + \"\\n\ud83d\udcbc \" + $json.title + \"\\n\ud83c\udfe2 \" + $json.company + \" (\" + $json.company_size + \")\\n\ud83c\udfed Industry: \" + $json.company_industry + \"\\n\\n\" + ($json.detected_type === 'inbound' ? '\ud83d\udccd Source: ' + $json.source : '\ud83c\udfa8 Personalization: ' + $json.personalized_opener) + \"\\n\\n\ud83d\udd17 View in HubSpot: [Contact Link]\"\n  }\n} }}"
            }
          ]
        }
      },
      "id": "teams_notify_unified",
      "name": "Route Teams Notification",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        3760,
        280
      ],
      "credentials": {
        "oAuth2Api": {
          "id": "{{CREDENTIAL_TEAMS}}",
          "name": "Microsoft Teams API"
        }
      },
      "notes": "Routes notification to appropriate Teams channel based on lead type"
    },
    {
      "parameters": {
        "content": "## Unified Routing Logic\n\n**MQL Path** (score \u226555):\n1. Notify sales team via Teams\n   - Inbound \u2192 #inbound-mqls\n   - Outbound \u2192 #outbound-intent\n2. Add to MQL queue sheet\n3. Enroll in appropriate sequence:\n   - Inbound MQL \u2192 Lemlist nurture\n   - Outbound MQL \u2192 Lemlist outreach\n\n**Nurture Path** (35-54):\n1. Add to nurture sheet\n2. Start Gmail drip campaign\n3. Re-score after engagement\n\n**Low Priority** (<35):\n1. Add to long-term nurture\n2. Minimal touch cadence\n\n**Channel Selection**:\n- Lemlist: Available & score \u226555\n- Gmail: Fallback or nurture leads",
        "height": 340,
        "width": 360
      },
      "id": "sticky_routing",
      "name": "Routing Logic Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        3720,
        520
      ]
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "append",
        "sheetId": "={{CREDENTIAL_GOOGLE_SHEETS}}/MQL_Queue",
        "range": "A:Z",
        "options": {}
      },
      "id": "sheets_mql_unified",
      "name": "Add to MQL Queue",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 3,
      "position": [
        3960,
        280
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "{{CREDENTIAL_GOOGLE_SHEETS}}",
          "name": "Google Sheets API"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.detected_type }}",
              "value2": "inbound"
            }
          ]
        }
      },
      "id": "if_inbound_mql",
      "name": "Inbound MQL?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        4160,
        280
      ]
    },
    {
      "parameters": {
        "operation": "addRecipient",
        "campaignId": "inbound_mql_nurture",
        "email": "={{ $json.normalized_email }}",
        "additionalFields": {
          "firstName": "={{ $json.name.split(' ')[0] }}",
          "lastName": "={{ $json.name.split(' ').slice(1).join(' ') }}",
          "companyName": "={{ $json.company }}",
          "customFields": {
            "jobTitle": "={{ $json.title }}",
            "leadScore": "={{ $json.lead_score }}",
            "source": "={{ $json.source }}"
          }
        }
      },
      "id": "lemlist_inbound_mql",
      "name": "Lemlist Inbound Sequence",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        4360,
        200
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "{{CREDENTIAL_LEMLIST}}",
          "name": "Lemlist API"
        }
      }
    },
    {
      "parameters": {
        "operation": "addRecipient",
        "campaignId": "={{ $json.campaign_name || 'default_outbound' }}",
        "email": "={{ $json.normalized_email }}",
        "additionalFields": {
          "firstName": "={{ $json.name.split(' ')[0] }}",
          "lastName": "={{ $json.name.split(' ').slice(1).join(' ') }}",
          "companyName": "={{ $json.company }}",
          "customFields": {
            "jobTitle": "={{ $json.title }}",
            "personalization": "={{ $json.personalized_opener }}",
            "leadScore": "={{ $json.lead_score }}"
          }
        }
      },
      "id": "lemlist_outbound_mql",
      "name": "Lemlist Outbound Sequence",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        4360,
        360
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "{{CREDENTIAL_LEMLIST}}",
          "name": "Lemlist API"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "append",
        "sheetId": "={{CREDENTIAL_GOOGLE_SHEETS}}/Nurture_Queue",
        "range": "A:Z",
        "options": {}
      },
      "id": "sheets_nurture_unified",
      "name": "Add to Nurture Queue",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 3,
      "position": [
        3760,
        480
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "{{CREDENTIAL_GOOGLE_SHEETS}}",
          "name": "Google Sheets API"
        }
      }
    },
    {
      "parameters": {
        "sendTo": "={{ $json.normalized_email }}",
        "subject": "={{ $json.detected_type === 'inbound' ? 'Welcome! Here\\'s what you need to know' : 'Following up on my previous email' }}",
        "message": "Hi ={{ $json.name.split(' ')[0] }},\n\n={{ $json.detected_type === 'inbound' ? 'Thanks for your interest in our solution. Based on your role at ' + $json.company + ', I thought you\\'d find these resources helpful...' : 'I wanted to follow up on my previous email about ' + $json.company + '. ' + $json.personalized_opener + '...' }}\n\nBest regards,\n[Your Team]",
        "options": {
          "senderName": "Growth Team"
        }
      },
      "id": "gmail_nurture_unified",
      "name": "Send Nurture Email",
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 1,
      "position": [
        3960,
        480
      ],
      "credentials": {
        "gmailOAuth2": {
          "id": "{{CREDENTIAL_GMAIL}}",
          "name": "Gmail OAuth2"
        }
      }
    },
    {
      "parameters": {
        "content": "## Conditional Logic & Fallbacks\n\n**Email Validation Failed**:\n1. Flag as `email_invalid`\n2. Send to human review queue\n3. Attempt alternative email discovery\n4. Notify data quality team\n\n**LinkedIn Invalid/Missing**:\n1. Mark `linkedin_missing`\n2. Try alternative enrichment (Clearbit, ZoomInfo)\n3. Downgrade personalization score\n4. Still proceed if email valid\n\n**Phone Invalid**:\n1. Attempt secondary provider\n2. Flag for manual research\n3. Proceed without phone\n4. Lower data quality score\n\n**Enrichment Failure**:\n1. Use original form data\n2. Flag for later re-enrichment\n3. Lower confidence score\n4. Still create record",
        "height": 400,
        "width": 380
      },
      "id": "sticky_conditionals",
      "name": "Conditional Logic Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1960,
        1080
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.email_valid }}",
              "value2": false
            }
          ]
        }
      },
      "id": "if_email_invalid",
      "name": "Email Invalid?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        2160,
        560
      ]
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "append",
        "sheetId": "={{CREDENTIAL_GOOGLE_SHEETS}}/Human_Review_Queue",
        "range": "A:M",
        "options": {}
      },
      "id": "sheets_review_queue",
      "name": "Send to Human Review",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 3,
      "position": [
        2360,
        640
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "{{CREDENTIAL_GOOGLE_SHEETS}}",
          "name": "Google Sheets API"
        }
      },
      "notes": "Queue for data quality team to manually verify and fix invalid emails"
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ !$json.linkedin_url || !$json.linkedin_valid }}",
              "value2": true
            }
          ]
        }
      },
      "id": "if_linkedin_missing",
      "name": "LinkedIn Missing?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        2360,
        380
      ]
    },
    {
      "parameters": {
        "url": "https://api.clearbit.com/v2/combined/find",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "qs": {
          "email": "={{ $json.normalized_email }}"
        }
      },
      "id": "fallback_enrichment",
      "name": "Alternative Enrichment (Clearbit)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        2560,
        460
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "{{CREDENTIAL_CLEARBIT}}",
          "name": "Clearbit API"
        }
      },
      "notes": "Fallback enrichment when LinkedIn data missing - attempts to find LinkedIn via Clearbit"
    },
    {
      "parameters": {
        "jsCode": "// Update lead with linkedin_missing flag\nreturn {\n  ...$input.first().json,\n  linkedin_missing: true,\n  linkedin_attempted: true,\n  data_quality_score: ($input.first().json.data_quality_score || 100) - 10\n};"
      },
      "id": "flag_linkedin_missing",
      "name": "Flag LinkedIn Missing",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2560,
        560
      ]
    },
    {
      "parameters": {
        "jsCode": "// Workflow Run Monitoring & Logging\nconst execution = $execution;\nconst items = $input.all();\n\nconst summary = {\n  execution_id: execution.id,\n  workflow_name: execution.workflow.name,\n  start_time: execution.startedAt,\n  end_time: new Date().toISOString(),\n  duration_seconds: (new Date() - new Date(execution.startedAt)) / 1000,\n  total_leads_processed: items.length,\n  inbound_count: items.filter(i => i.json.detected_type === 'inbound').length,\n  outbound_count: items.filter(i => i.json.detected_type === 'outbound').length,\n  mql_count: items.filter(i => i.json.is_mql).length,\n  nurture_count: items.filter(i => !i.json.is_mql && i.json.lead_score >= 35).length,\n  errors_count: 0, // Would be populated by error handler\n  avg_lead_score: items.reduce((sum, i) => sum + (i.json.lead_score || 0), 0) / items.length\n};\n\nreturn summary;"
      },
      "id": "monitor_execution",
      "name": "Monitor Workflow Execution",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4560,
        380
      ]
    },
    {
      "parameters": {
        "content": "## Monitoring & Reporting\n\n**Real-time Metrics**:\n- Leads processed (inbound/outbound)\n- MQL conversion rate\n- Average lead score\n- Data quality metrics\n- Processing time\n- Error rate\n\n**Daily Summary** (Teams):\n- Total leads: XX\n- MQLs generated: XX\n- Top sources\n- Quality issues\n- Performance vs. yesterday\n\n**Logged to Google Sheets**:\n- Execution history\n- Performance trends\n- Error log with details\n\n**Alerts**:\n- Error rate >5%\n- Processing time >10min\n- MQL rate <10%",
        "height": 360,
        "width": 360
      },
      "id": "sticky_monitoring",
      "name": "Monitoring Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        4520,
        640
      ]
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "append",
        "sheetId": "={{CREDENTIAL_GOOGLE_SHEETS}}/Workflow_Logs",
        "range": "A:L",
        "options": {}
      },
      "id": "sheets_workflow_log",
      "name": "Log to Workflow Sheet",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 3,
      "position": [
        4760,
        380
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "{{CREDENTIAL_GOOGLE_SHEETS}}",
          "name": "Google Sheets API"
        }
      }
    },
    {
      "parameters": {
        "url": "https://graph.microsoft.com/v1.0/teams/{{CREDENTIAL_TEAMS}}/channels/ops-monitoring/messages",
        "authentication": "genericCredentialType",
        "genericAuthType": "oAuth2Api",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "body",
              "value": "={{ {\n  \"body\": {\n    \"content\": \"\ud83d\udcca Daily Pipeline Summary \" + new Date().toLocaleDateString() + \"\\n\\n\" +\n      \"\u2705 Leads Processed: \" + $json.total_leads_processed + \"\\n\" +\n      \"\ud83d\udce5 Inbound: \" + $json.inbound_count + \"\\n\" +\n      \"\ud83d\udce4 Outbound: \" + $json.outbound_count + \"\\n\" +\n      \"\ud83d\udd25 MQLs Generated: \" + $json.mql_count + \"\\n\" +\n      \"\ud83c\udf31 Nurture Queue: \" + $json.nurture_count + \"\\n\" +\n      \"\ud83d\udcc8 Avg Score: \" + Math.round($json.avg_lead_score) + \"\\n\" +\n      \"\u23f1\ufe0f Processing Time: \" + Math.round($json.duration_seconds) + \"s\\n\" +\n      \"\u274c Errors: \" + $json.errors_count\n  }\n} }}"
            }
          ]
        },
        "options": {
          "timeout": 10000
        }
      },
      "id": "teams_daily_summary",
      "name": "Send Daily Summary to Teams",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        4960,
        380
      ],
      "credentials": {
        "oAuth2Api": {
          "id": "{{CREDENTIAL_TEAMS}}",
          "name": "Microsoft Teams API"
        }
      },
      "notes": "Posts daily summary to ops monitoring channel"
    },
    {
      "parameters": {
        "content": "## API Endpoint Placeholders\n\n**Replace with actual endpoints**:\n\n**Apify Actors**:\n- CompanyContactEnricher: `apify/company-contact-enricher`\n- TargetAccountScraper: `apify/target-account-scraper`\n- UnifiedContactEnricher: `apify/unified-enricher`\n\n**Email Validation**:\n- Primary: `https://api.zerobounce.net/v2/validate`\n- Fallback: `https://api.hunter.io/v2/email-verifier`\n\n**LinkedIn Validation**:\n- `https://api.proxycurl.com/api/linkedin/profile`\n\n**Phone Validation**:\n- `https://api.numverify.com/validate`\n\n**Expected JSON Keys from Apify**:\n```json\n{\n  \"email_verified\": string,\n  \"company_size\": string,\n  \"industry\": string,\n  \"linkedin_url\": string,\n  \"phone\": string,\n  \"job_level\": string,\n  \"tech_stack\": array,\n  \"recent_news\": array\n}\n```",
        "height": 460,
        "width": 400
      },
      "id": "sticky_api_placeholders",
      "name": "API Placeholders Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        240,
        1080
      ]
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 1
            }
          ]
        },
        "resume": "webhook",
        "maxRetries": 3,
        "retryInterval": 300
      },
      "id": "error_handler_combined",
      "name": "Error Handler",
      "type": "n8n-nodes-base.errorTrigger",
      "typeVersion": 1,
      "position": [
        760,
        1080
      ]
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "append",
        "sheetId": "={{CREDENTIAL_GOOGLE_SHEETS}}/Error_Log",
        "range": "A:H",
        "options": {}
      },
      "id": "log_error_combined",
      "name": "Log Error to Sheet",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 3,
      "position": [
        960,
        1080
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "{{CREDENTIAL_GOOGLE_SHEETS}}",
          "name": "Google Sheets API"
        }
      }
    },
    {
      "parameters": {
        "url": "https://graph.microsoft.com/v1.0/teams/{{CREDENTIAL_TEAMS}}/channels/ops-alerts/messages",
        "authentication": "genericCredentialType",
        "genericAuthType": "oAuth2Api",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "body",
              "value": "={{ {\n  \"body\": {\n    \"content\": \"\u26a0\ufe0f Pipeline Error Alert\\n\\nWorkflow: Combined Pipeline\\nError: \" + $json.error.message + \"\\nNode: \" + $json.node.name + \"\\nTime: \" + new Date().toISOString() + \"\\n\\nLead Data: \" + JSON.stringify($json.inputData).substring(0, 200) + \"...\\n\\nAction Required: Review error log\"\n  }\n} }}"
            }
          ]
        }
      },
      "id": "teams_error_alert",
      "name": "Alert Ops Team",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        1160,
        1080
      ],
      "credentials": {
        "oAuth2Api": {
          "id": "{{CREDENTIAL_TEAMS}}",
          "name": "Microsoft Teams API"
        }
      }
    },
    {
      "parameters": {
        "content": "## Error Handling & Recovery\n\n**Error Types & Actions**:\n\n**Rate Limits (429)**:\n- Exponential backoff: 1m, 5m, 15m\n- Queue for later processing\n- Switch to backup provider if available\n\n**API Failures (5xx)**:\n- Retry 3x with delays\n- Log detailed error\n- Continue with partial data\n- Alert ops team if critical\n\n**Data Quality Issues**:\n- Invalid email \u2192 Human review queue\n- Missing LinkedIn \u2192 Alternative enrichment\n- No phone \u2192 Flag and proceed\n\n**Timeout Errors**:\n- Reduce batch size\n- Split into smaller chunks\n- Process synchronously\n\n**Recovery**:\n- All raw leads logged first\n- Can replay from raw leads sheet\n- Idempotent operations (upsert, not insert)\n- Canonical ID prevents duplicates",
        "height": 440,
        "width": 400
      },
      "id": "sticky_error_recovery",
      "name": "Error Recovery Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1360,
        1080
      ]
    }
  ],
  "connections": {
    "Unified Lead Webhook": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          },
          {
            "node": "Detect Lead Type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Detect Lead Type": {
      "main": [
        [
          {
            "node": "Save to Unified Raw Leads",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save to Unified Raw Leads": {
      "main": [
        [
          {
            "node": "Is Inbound?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Inbound?": {
      "main": [
        [
          {
            "node": "Shared Enrichment Service",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Outbound Enrichment Service",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Shared Enrichment Service": {
      "main": [
        [
          {
            "node": "Validate Email (Shared)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Outbound Enrichment Service": {
      "main": [
        [
          {
            "node": "Validate Email (Shared)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Email (Shared)": {
      "main": [
        [
          {
            "node": "Validate LinkedIn (Shared)",
            "type": "main",
            "index": 0
          },
          {
            "node": "Email Invalid?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate LinkedIn (Shared)": {
      "main": [
        [
          {
            "node": "LinkedIn Missing?",
            "type": "main",
            "index": 0
          },
          {
            "node": "Centralized Scoring Engine",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Email Invalid?": {
      "main": [
        [
          {
            "node": "Send to Human Review",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LinkedIn Missing?": {
      "main": [
        [
          {
            "node": "Alternative Enrichment (Clearbit)",
            "type": "main",
            "index": 0
          },
          {
            "node": "Flag LinkedIn Missing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Alternative Enrichment (Clearbit)": {
      "main": [
        [
          {
            "node": "Centralized Scoring Engine",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Flag LinkedIn Missing": {
      "main": [
        [
          {
            "node": "Centralized Scoring Engine",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Centralized Scoring Engine": {
      "main": [
        [
          {
            "node": "Canonicalization & Dedupe Service",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Canonicalization & Dedupe Service": {
      "main": [
        [
          {
            "node": "Lookup Canonical Record",
            "type": "main",
            "index": 0
          },
          {
            "node": "Lookup in HubSpot",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Lookup Canonical Record": {
      "main": [
        [
          {
            "node": "Is New Record?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Lookup in HubSpot": {
      "main": [
        [
          {
            "node": "Is New Record?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is New Record?": {
      "main": [
        [
          {
            "node": "Upsert to HubSpot",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upsert to HubSpot": {
      "main": [
        [
          {
            "node": "Save to Enriched Leads Sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save to Enriched Leads Sheet": {
      "main": [
        [
          {
            "node": "Is MQL?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is MQL?": {
      "main": [
        [
          {
            "node": "Route Teams Notification",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Add to Nurture Queue",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Teams Notification": {
      "main": [
        [
          {
            "node": "Add to MQL Queue",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add to MQL Queue": {
      "main": [
        [
          {
            "node": "Inbound MQL?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Inbound MQL?": {
      "main": [
        [
          {
            "node": "Lemlist Inbound Sequence",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Lemlist Outbound Sequence",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Lemlist Inbound Sequence": {
      "main": [
        [
          {
            "node": "Monitor Workflow Execution",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Lemlist Outbound Sequence": {
      "main": [
        [
          {
            "node": "Monitor Workflow Execution",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add to Nurture Queue": {
      "main": [
        [
          {
            "node": "Send Nurture Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Nurture Email": {
      "main": [
        [
          {
            "node": "Monitor Workflow Execution",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Monitor Workflow Execution": {
      "main": [
        [
          {
            "node": "Log to Workflow Sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log to Workflow Sheet": {
      "main": [
        [
          {
            "node": "Send Daily Summary to Teams",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Handler": {
      "main": [
        [
          {
            "node": "Log Error to Sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Error to Sheet": {
      "main": [
        [
          {
            "node": "Alert Ops Team",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1",
  "id": "combined_pipeline_001",
  "tags": [
    {
      "name": "GTM",
      "id": "gtm_tag"
    },
    {
      "name": "Combined",
      "id": "combined_tag"
    },
    {
      "name": "Production",
      "id": "production_tag"
    }
  ]
}